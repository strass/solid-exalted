import * as crypto from 'crypto';
import { promisify } from 'util';
import dsaDigest from './dsa_digest.mjs';
import hmacDigest from './hmac_digest.mjs';
import keyForCrypto from './node_key.mjs';
import getSignVerifyKey from './get_sign_verify_key.mjs';

let oneShotSign = crypto.sign;
if (oneShotSign.length > 3) {
    oneShotSign = promisify(oneShotSign);
}
const sign = async (alg, key, data) => {
    const keyObject = getSignVerifyKey(alg, key, 'sign');
    if (alg.startsWith('HS')) {
        const bitlen = parseInt(alg.substr(-3), 10);
        if (!keyObject.symmetricKeySize || keyObject.symmetricKeySize << 3 < bitlen) {
            throw new TypeError(`${alg} requires symmetric keys to be ${bitlen} bits or larger`);
        }
        const hmac = crypto.createHmac(hmacDigest(alg), keyObject);
        hmac.update(data);
        return hmac.digest();
    }
    return oneShotSign(dsaDigest(alg), data, keyForCrypto(alg, keyObject));
};

export default sign;
