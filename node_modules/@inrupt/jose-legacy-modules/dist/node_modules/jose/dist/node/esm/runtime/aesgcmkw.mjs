import encrypt from './encrypt.mjs';
import decrypt from './decrypt.mjs';
import factory from '../lib/iv.mjs';
import { randomFillSync } from 'crypto';
import { encode } from './base64url.mjs';

const generateIv = factory(randomFillSync);
const wrap = async (alg, key, cek, iv) => {
    const jweAlgorithm = alg.substr(0, 7);
    iv || (iv = generateIv(jweAlgorithm));
    const { ciphertext: encryptedKey, tag } = await encrypt(jweAlgorithm, cek, key, iv, new Uint8Array(0));
    return { encryptedKey, iv: encode(iv), tag: encode(tag) };
};
const unwrap = async (alg, key, encryptedKey, iv, tag) => {
    const jweAlgorithm = alg.substr(0, 7);
    return decrypt(jweAlgorithm, key, encryptedKey, iv, tag, new Uint8Array(0));
};

export { unwrap, wrap };
