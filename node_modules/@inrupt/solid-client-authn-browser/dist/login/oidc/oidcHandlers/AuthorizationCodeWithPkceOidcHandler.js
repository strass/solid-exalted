"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const tsyringe_1 = require("tsyringe");
const oidc_client_ext_1 = require("@inrupt/oidc-client-ext");
let AuthorizationCodeWithPkceOidcHandler = class AuthorizationCodeWithPkceOidcHandler {
    constructor(storageUtility, redirector) {
        this.storageUtility = storageUtility;
        this.redirector = redirector;
    }
    async canHandle(oidcLoginOptions) {
        return !!(oidcLoginOptions.issuerConfiguration.grantTypesSupported &&
            oidcLoginOptions.issuerConfiguration.grantTypesSupported.indexOf("authorization_code") > -1);
    }
    async handle(oidcLoginOptions) {
        const oidcOptions = {
            authority: oidcLoginOptions.issuer.toString(),
            client_id: oidcLoginOptions.client.clientId,
            client_secret: oidcLoginOptions.client.clientSecret,
            redirect_uri: oidcLoginOptions.redirectUrl.toString(),
            post_logout_redirect_uri: oidcLoginOptions.redirectUrl.toString(),
            response_type: "code",
            scope: "openid webid",
            filterProtocolClaims: true,
            loadUserInfo: false,
            code_verifier: true,
            prompt: oidcLoginOptions.prompt,
        };
        const oidcClientLibrary = new oidc_client_ext_1.OidcClient(oidcOptions);
        const { redirector } = this;
        const storage = this.storageUtility;
        try {
            const signingRequest = await oidcClientLibrary.createSigninRequest();
            await Promise.all([
                storage.setForUser(signingRequest.state._id, {
                    sessionId: oidcLoginOptions.sessionId,
                }),
                storage.setForUser(oidcLoginOptions.sessionId, {
                    codeVerifier: signingRequest.state._code_verifier,
                    issuer: oidcLoginOptions.issuer.toString(),
                    redirectUrl: oidcLoginOptions.redirectUrl,
                    dpop: oidcLoginOptions.dpop ? "true" : "false",
                }),
            ]);
            redirector.redirect(signingRequest.url.toString(), {
                handleRedirect: oidcLoginOptions.handleRedirect,
                redirectInIframe: oidcLoginOptions.inIframe,
            });
        }
        catch (err) {
            console.error(err);
        }
        return undefined;
    }
};
AuthorizationCodeWithPkceOidcHandler = __decorate([
    tsyringe_1.injectable(),
    __param(0, tsyringe_1.inject("browser:storageUtility")),
    __param(1, tsyringe_1.inject("browser:redirector")),
    __metadata("design:paramtypes", [Object, Object])
], AuthorizationCodeWithPkceOidcHandler);
exports.default = AuthorizationCodeWithPkceOidcHandler;
//# sourceMappingURL=AuthorizationCodeWithPkceOidcHandler.js.map