"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Session = exports.silentlyAuthenticate = void 0;
const events_1 = require("events");
const uuid_1 = require("uuid");
const dependencies_1 = require("./dependencies");
const constant_1 = require("./constant");
const iframe_1 = require("./iframe");
async function silentlyAuthenticate(sessionId, clientAuthn, options = {
    inIframe: false,
}) {
    var _a;
    const storedSessionInfo = await clientAuthn.validateCurrentSession();
    if (storedSessionInfo !== null) {
        window.localStorage.setItem(constant_1.KEY_CURRENT_URL, window.location.href);
        await clientAuthn.login({
            sessionId,
            prompt: "none",
            oidcIssuer: storedSessionInfo.issuer,
            redirectUrl: storedSessionInfo.redirectUrl,
            clientId: storedSessionInfo.clientAppId,
            clientSecret: storedSessionInfo.clientAppSecret,
            tokenType: (_a = storedSessionInfo.tokenType) !== null && _a !== void 0 ? _a : "DPoP",
            inIframe: options.inIframe,
        });
        return true;
    }
    return false;
}
exports.silentlyAuthenticate = silentlyAuthenticate;
function isLoggedIn(sessionInfo) {
    return !!(sessionInfo === null || sessionInfo === void 0 ? void 0 : sessionInfo.isLoggedIn);
}
class Session extends events_1.EventEmitter {
    constructor(sessionOptions = {}, sessionId) {
        super();
        this.tokenRequestInProgress = false;
        this.tmpFetchWithCookies = false;
        this.login = async (options) => {
            var _a;
            await this.clientAuthentication.login({
                sessionId: this.info.sessionId,
                ...options,
                tokenType: (_a = options.tokenType) !== null && _a !== void 0 ? _a : "DPoP",
            });
            return new Promise(() => undefined);
        };
        this.fetch = async (url, init) => {
            return this.clientAuthentication.fetch(url, {
                ...init,
                credentials: this.tmpFetchWithCookies
                    ?
                        "include"
                    :
                        init === null || init === void 0 ? void 0 : init.credentials,
            });
        };
        this.logout = async () => {
            await this.clientAuthentication.logout(this.info.sessionId);
            this.info.isLoggedIn = false;
            this.tmpFetchWithCookies = false;
            this.emit("logout");
        };
        this.handleIncomingRedirect = async (inputOptions = {}) => {
            var _a;
            if (this.info.isLoggedIn) {
                return this.info;
            }
            if (this.tokenRequestInProgress) {
                return undefined;
            }
            const options = typeof inputOptions === "string" ? { url: inputOptions } : inputOptions;
            const url = (_a = options.url) !== null && _a !== void 0 ? _a : window.location.href;
            if (window.frameElement !== null) {
                iframe_1.postRedirectUrlToParent(url);
                return undefined;
            }
            if (options.useEssSession !== true ||
                options.restorePreviousSession === true) {
                window.localStorage.setItem("tmp-resource-server-session-enabled", "false");
            }
            else {
                window.localStorage.setItem("tmp-resource-server-session-enabled", "true");
            }
            const storedSessionCookieReference = window.localStorage.getItem("tmp-resource-server-session-info");
            if (typeof storedSessionCookieReference === "string" &&
                options.restorePreviousSession !== true &&
                options.useEssSession === true) {
                function isValidSessionCookieReference(reference) {
                    var _a;
                    const resourceServers = Object.keys((_a = reference.sessions) !== null && _a !== void 0 ? _a : {});
                    return (typeof reference.webId === "string" &&
                        resourceServers.length > 0 &&
                        typeof reference.sessions[resourceServers[0]].expiration === "number");
                }
                const reference = JSON.parse(storedSessionCookieReference);
                if (isValidSessionCookieReference(reference)) {
                    const resourceServers = Object.keys(reference.sessions);
                    const webIdOrigin = new URL(reference.webId).hostname;
                    const ownResourceServer = resourceServers.find((resourceServer) => {
                        return new URL(resourceServer).hostname === webIdOrigin;
                    });
                    const relevantServer = ownResourceServer !== null && ownResourceServer !== void 0 ? ownResourceServer : resourceServers[0];
                    if (reference.sessions[relevantServer].expiration - Date.now() >
                        5 * 60 * 1000) {
                        this.info.isLoggedIn = true;
                        this.info.webId = reference.webId;
                        this.tmpFetchWithCookies = true;
                        return this.info;
                    }
                }
            }
            this.tokenRequestInProgress = true;
            const sessionInfo = await this.clientAuthentication.handleIncomingRedirect(url);
            if (isLoggedIn(sessionInfo)) {
                this.setSessionInfo(sessionInfo);
                const currentUrl = window.localStorage.getItem(constant_1.KEY_CURRENT_URL);
                if (currentUrl === null) {
                    this.emit("login");
                }
                else {
                    window.localStorage.removeItem(constant_1.KEY_CURRENT_URL);
                    this.emit("sessionRestore", currentUrl);
                }
            }
            else if (options.restorePreviousSession === true) {
                const storedSessionId = window.localStorage.getItem(constant_1.KEY_CURRENT_SESSION);
                if (storedSessionId !== null) {
                    const attemptedSilentAuthentication = await silentlyAuthenticate(storedSessionId, this.clientAuthentication);
                    if (attemptedSilentAuthentication) {
                        return new Promise(() => { });
                    }
                }
            }
            this.tokenRequestInProgress = false;
            return sessionInfo;
        };
        if (sessionOptions.clientAuthentication) {
            this.clientAuthentication = sessionOptions.clientAuthentication;
        }
        else if (sessionOptions.secureStorage && sessionOptions.insecureStorage) {
            this.clientAuthentication = dependencies_1.getClientAuthenticationWithDependencies({
                secureStorage: sessionOptions.secureStorage,
                insecureStorage: sessionOptions.insecureStorage,
            });
        }
        else {
            this.clientAuthentication = dependencies_1.getClientAuthenticationWithDependencies({});
        }
        if (sessionOptions.sessionInfo) {
            this.info = {
                sessionId: sessionOptions.sessionInfo.sessionId,
                isLoggedIn: false,
                webId: sessionOptions.sessionInfo.webId,
            };
        }
        else {
            this.info = {
                sessionId: sessionId !== null && sessionId !== void 0 ? sessionId : uuid_1.v4(),
                isLoggedIn: false,
            };
        }
        iframe_1.setupIframeListener(async (redirectUrl) => {
            const sessionInfo = await this.clientAuthentication.handleIncomingRedirect(redirectUrl);
            if (!isLoggedIn(sessionInfo)) {
                return;
            }
            this.setSessionInfo(sessionInfo);
        });
        this.on("tokenRenewal", () => silentlyAuthenticate(this.info.sessionId, this.clientAuthentication, {
            inIframe: true,
        }));
    }
    onLogin(callback) {
        this.on("login", callback);
    }
    onLogout(callback) {
        this.on("logout", callback);
    }
    onSessionRestore(callback) {
        this.on("sessionRestore", callback);
    }
    setSessionInfo(sessionInfo) {
        this.info.isLoggedIn = sessionInfo.isLoggedIn;
        this.info.webId = sessionInfo.webId;
        this.info.sessionId = sessionInfo.sessionId;
        this.info.expirationDate = sessionInfo.expirationDate;
        if (typeof sessionInfo.expirationDate === "number") {
            setTimeout(async () => {
                await this.logout();
            }, sessionInfo.expirationDate - Date.now());
        }
    }
}
exports.Session = Session;
//# sourceMappingURL=Session.js.map