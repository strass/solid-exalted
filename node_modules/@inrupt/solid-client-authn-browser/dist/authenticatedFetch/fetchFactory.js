"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildDpopFetch = exports.buildBearerFetch = void 0;
const solid_client_authn_core_1 = require("@inrupt/solid-client-authn-core");
function buildBearerFetch(authToken) {
    return (init, options) => {
        return fetch(init, {
            ...options,
            credentials: "include",
            headers: {
                ...options === null || options === void 0 ? void 0 : options.headers,
                Authorization: `Bearer ${authToken}`,
            },
        });
    };
}
exports.buildBearerFetch = buildBearerFetch;
async function buildDpopFetchOptions(targetUrl, authToken, dpopKey, defaultOptions) {
    var _a;
    return {
        ...defaultOptions,
        headers: {
            ...defaultOptions === null || defaultOptions === void 0 ? void 0 : defaultOptions.headers,
            Authorization: `DPoP ${authToken}`,
            DPoP: await solid_client_authn_core_1.createDpopHeader(targetUrl, (_a = defaultOptions === null || defaultOptions === void 0 ? void 0 : defaultOptions.method) !== null && _a !== void 0 ? _a : "get", dpopKey),
        },
        credentials: "include",
    };
}
function isExpectedAuthError(statusCode) {
    return [401, 403].includes(statusCode);
}
async function buildDpopFetch(authToken, dpopKey) {
    return async (url, options) => {
        const response = await fetch(url, await buildDpopFetchOptions(url.toString(), authToken, dpopKey, options));
        const failedButNotExpectedAuthError = !response.ok && !isExpectedAuthError(response.status);
        const hasBeenRedirected = response.url !== url;
        if (response.ok || failedButNotExpectedAuthError || !hasBeenRedirected) {
            return response;
        }
        return fetch(response.url, await buildDpopFetchOptions(response.url, authToken, dpopKey, options));
    };
}
exports.buildDpopFetch = buildDpopFetch;
//# sourceMappingURL=fetchFactory.js.map