import "reflect-metadata";
import { ILoginHandler, ILogoutHandler, IRedirectHandler, ISessionInfo, ISessionInfoManager, IIssuerConfigFetcher, ISessionInternalInfo, ILoginOptions } from "@inrupt/solid-client-authn-core";
export default class ClientAuthentication {
    private loginHandler;
    private redirectHandler;
    private logoutHandler;
    private sessionInfoManager;
    private issuerConfigFetcher;
    constructor(loginHandler: ILoginHandler, redirectHandler: IRedirectHandler, logoutHandler: ILogoutHandler, sessionInfoManager: ISessionInfoManager, issuerConfigFetcher: IIssuerConfigFetcher);
    login: (options: ILoginOptions) => Promise<void>;
    fetch: ((input: RequestInfo, init?: RequestInit | undefined) => Promise<Response>) & typeof fetch;
    logout: (sessionId: string) => Promise<void>;
    getSessionInfo: (sessionId: string) => Promise<(ISessionInfo & ISessionInternalInfo) | undefined>;
    getAllSessionInfo: () => Promise<ISessionInfo[]>;
    validateCurrentSession: () => Promise<(ISessionInfo & ISessionInternalInfo) | null>;
    handleIncomingRedirect: (url: string) => Promise<ISessionInfo | undefined>;
}
