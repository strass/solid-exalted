"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const IssuerConfig_1 = require("../login/oidc/__mocks__/IssuerConfig");
const IssuerConfigFetcher_1 = require("../login/oidc/__mocks__/IssuerConfigFetcher");
const StorageUtility_1 = __importStar(require("./StorageUtility"));
const StorageUtility_2 = require("./__mocks__/StorageUtility");
globals_1.describe("StorageUtility", () => {
    const defaultMocks = {
        secureStorage: StorageUtility_2.mockStorage({}),
        insecureStorage: StorageUtility_2.mockStorage({}),
    };
    const key = "the key";
    const value = "the value";
    const userId = "animals";
    function getStorageUtility(mocks = defaultMocks) {
        var _a, _b;
        return new StorageUtility_1.default((_a = mocks.secureStorage) !== null && _a !== void 0 ? _a : defaultMocks.secureStorage, (_b = mocks.insecureStorage) !== null && _b !== void 0 ? _b : defaultMocks.insecureStorage);
    }
    globals_1.describe("get", () => {
        globals_1.it("gets an item from storage", async () => {
            const storageUtility = getStorageUtility({
                insecureStorage: StorageUtility_2.mockStorage({}),
            });
            await storageUtility.set(key, value);
            const result = await storageUtility.get(key);
            globals_1.expect(result).toBe(value);
        });
        globals_1.it("gets an item from (secure) storage", async () => {
            const storageUtility = getStorageUtility({
                secureStorage: StorageUtility_2.mockStorage({}),
            });
            await storageUtility.set(key, value, { secure: true });
            const result = await storageUtility.get(key, { secure: true });
            globals_1.expect(result).toBe(value);
        });
        globals_1.it("returns undefined if the item is not in storage", async () => {
            const storageUtility = getStorageUtility({
                insecureStorage: StorageUtility_2.mockStorage({}),
            });
            const retrievedValue = await storageUtility.get("key");
            globals_1.expect(retrievedValue).toBeUndefined();
        });
        globals_1.it("throws an error if the item is not in storage and errorOnNull is true", async () => {
            const storageMock = defaultMocks.insecureStorage;
            const storageUtility = getStorageUtility({
                insecureStorage: storageMock,
            });
            await globals_1.expect(storageUtility.get("key", { errorIfNull: true })).rejects.toThrow("[key] is not stored");
        });
    });
    globals_1.describe("set", () => {
        globals_1.it("sets an item in storage", async () => {
            const storageUtility = getStorageUtility({
                insecureStorage: StorageUtility_2.mockStorage({}),
            });
            await storageUtility.set(key, value);
            await globals_1.expect(storageUtility.get(key)).resolves.toEqual(value);
        });
    });
    globals_1.describe("delete", () => {
        globals_1.it("deletes an item", async () => {
            const storageUtility = getStorageUtility({
                insecureStorage: StorageUtility_2.mockStorage({}),
            });
            await globals_1.expect(storageUtility.get(key)).resolves.toBeUndefined();
            await storageUtility.set(key, value);
            await globals_1.expect(storageUtility.get(key)).resolves.toEqual(value);
            await storageUtility.delete(key);
            await globals_1.expect(storageUtility.get(key)).resolves.toBeUndefined();
        });
        globals_1.it("deletes an item (from secure storage)", async () => {
            const storageUtility = getStorageUtility({
                insecureStorage: StorageUtility_2.mockStorage({}),
            });
            await globals_1.expect(storageUtility.get(key, { secure: true })).resolves.toBeUndefined();
            await storageUtility.set(key, value, { secure: true });
            await globals_1.expect(storageUtility.get(key, { secure: true })).resolves.toEqual(value);
            await storageUtility.delete(key, { secure: true });
            await globals_1.expect(storageUtility.get(key, { secure: true })).resolves.toBeUndefined();
        });
    });
    globals_1.describe("getForUser", () => {
        globals_1.it("throws if data stored is invalid JSON", async () => {
            const mockedStorageUtility = StorageUtility_2.mockStorage({});
            mockedStorageUtility.get = globals_1.jest
                .fn()
                .mockReturnValue("This response deliberately cannot be parsed as JSON!");
            const storageUtility = getStorageUtility({
                insecureStorage: mockedStorageUtility,
                secureStorage: mockedStorageUtility,
            });
            await globals_1.expect(storageUtility.getForUser("irrelevant for this test", "Doesn't matter")).rejects.toThrow("cannot be parsed as JSON!");
            await globals_1.expect(storageUtility.getForUser("irrelevant for this test", "Doesn't matter", { secure: true })).rejects.toThrow("cannot be parsed as JSON!");
        });
        globals_1.it("gets an item from storage for a user", async () => {
            const storageUtility = getStorageUtility({
                insecureStorage: StorageUtility_2.mockStorage({}),
            });
            const userData = {
                jackie: "The Cat",
                sledge: "The Dog",
            };
            await storageUtility.setForUser(userId, userData);
            const retrievedValue = await storageUtility.getForUser(userId, "jackie");
            globals_1.expect(retrievedValue).toBe("The Cat");
        });
        globals_1.it("gets an item from (secure) storage for a user", async () => {
            const storageUtility = getStorageUtility({
                secureStorage: StorageUtility_2.mockStorage({}),
            });
            const userData = {
                jackie: "The Cat",
                sledge: "The Dog",
            };
            await storageUtility.setForUser(userId, userData, {
                secure: true,
            });
            const retrievedValue = await storageUtility.getForUser(userId, "jackie", {
                secure: true,
            });
            globals_1.expect(retrievedValue).toBe("The Cat");
        });
        globals_1.it("returns undefined if no item is in storage", async () => {
            const storageUtility = getStorageUtility({
                insecureStorage: StorageUtility_2.mockStorage({}),
            });
            const retrievedValue = await storageUtility.getForUser(userId, "jackie");
            globals_1.expect(retrievedValue).toBeUndefined();
        });
        globals_1.it("returns null if the item in storage is corrupted", async () => {
            const storageUtility = getStorageUtility({
                insecureStorage: StorageUtility_2.mockStorage({}),
            });
            await storageUtility.setForUser(userId, {
                cool: "bleep bloop not parsable",
            });
            const retrievedValue = await storageUtility.getForUser(userId, "jackie");
            globals_1.expect(retrievedValue).toBeUndefined();
        });
        globals_1.it("throws an error if the item is not in storage and errorOnNull is true", async () => {
            const storageUtility = getStorageUtility({
                insecureStorage: StorageUtility_2.mockStorage({}),
            });
            await globals_1.expect(storageUtility.getForUser(userId, "jackie", { errorIfNull: true })).rejects.toThrow(`Field [jackie] for user [${userId}] is not stored`);
        });
    });
    globals_1.describe("setForUser", () => {
        globals_1.it("sets a value for a user", async () => {
            const storageUtility = getStorageUtility({
                insecureStorage: StorageUtility_2.mockStorage({}),
            });
            await storageUtility.setForUser(userId, {
                jackie: "The Pretty Kitty",
            });
            const retrievedValue = await storageUtility.getForUser(userId, "jackie");
            globals_1.expect(retrievedValue).toBe("The Pretty Kitty");
        });
        globals_1.it("sets a value for a user if the original data was corrupted", async () => {
            const storageMock = defaultMocks.insecureStorage;
            await storageMock.set(`solidClientAuthenticationUser:${userId}`, 'cool: "bleep bloop not parsable"');
            const storageUtility = getStorageUtility({
                insecureStorage: storageMock,
            });
            await storageUtility.setForUser(userId, {
                jackie: "The Pretty Kitty",
            });
            const retrievedValue = await storageUtility.getForUser(userId, "jackie");
            globals_1.expect(retrievedValue).toBe("The Pretty Kitty");
        });
    });
    globals_1.describe("deleteForUser", () => {
        globals_1.it("deletes a value for a user from unsecure storage", async () => {
            const userData = {
                jackie: "The Cat",
                sledge: "The Dog",
            };
            const storageUtility = getStorageUtility({
                insecureStorage: StorageUtility_2.mockStorage({}),
            });
            await storageUtility.setForUser(userId, userData);
            await storageUtility.deleteForUser(userId, "jackie");
            await globals_1.expect(storageUtility.getForUser(userId, "jackie")).resolves.toBeUndefined();
            await globals_1.expect(storageUtility.getForUser(userId, "sledge")).resolves.toEqual("The Dog");
        });
        globals_1.it("deletes a value for a user from secure storage", async () => {
            const storageUtility = getStorageUtility({
                secureStorage: StorageUtility_2.mockStorage({
                    "solidClientAuthenticationUser:someUser": {
                        jackie: "The Cat",
                        sledge: "The Dog",
                    },
                }),
            });
            await storageUtility.deleteForUser("someUser", "jackie", {
                secure: true,
            });
            await globals_1.expect(storageUtility.getForUser("someUser", "jackie", { secure: true })).resolves.toBeUndefined();
            await globals_1.expect(storageUtility.getForUser("someUser", "sledge", { secure: true })).resolves.toEqual("The Dog");
        });
    });
    globals_1.describe("deleteAllUserData", () => {
        globals_1.it("deletes all data for a particular user", async () => {
            const storageUtility = getStorageUtility({
                insecureStorage: StorageUtility_2.mockStorage({}),
            });
            const userData = {
                jackie: "The Cat",
                sledge: "The Dog",
            };
            await storageUtility.setForUser(userId, userData);
            await globals_1.expect(storageUtility.getForUser(userId, "jackie")).resolves.toEqual("The Cat");
            await storageUtility.deleteAllUserData(userId);
            await globals_1.expect(storageUtility.getForUser(userId, "jackie")).resolves.toBeUndefined();
        });
        globals_1.it("deletes all data for a particular user (from secure storage)", async () => {
            const storageUtility = getStorageUtility({
                secureStorage: StorageUtility_2.mockStorage({}),
            });
            const userData = {
                jackie: "The Cat",
                sledge: "The Dog",
            };
            await storageUtility.setForUser(userId, userData, { secure: true });
            await globals_1.expect(storageUtility.getForUser(userId, "jackie", { secure: true })).resolves.toEqual("The Cat");
            await storageUtility.deleteAllUserData(userId, { secure: true });
            await globals_1.expect(storageUtility.getForUser(userId, "jackie", { secure: true })).resolves.toBeUndefined();
        });
    });
    globals_1.describe("storeResourceServerSessionInfo", () => {
        globals_1.it("stores session information for a new WebID", async () => {
            var _a;
            const storageUtility = getStorageUtility({
                insecureStorage: StorageUtility_2.mockStorage({}),
            });
            await storageUtility.storeResourceServerSessionInfo("https://some.pod/profile#me", "https://some-resource.provider/", 1610026667);
            globals_1.expect(JSON.parse((_a = (await storageUtility.get("tmp-resource-server-session-info"))) !== null && _a !== void 0 ? _a : "{}")).toEqual({
                webId: "https://some.pod/profile#me",
                sessions: {
                    "https://some-resource.provider/": {
                        expiration: 1610026667,
                    },
                },
            });
        });
        globals_1.it("adds a new resource server to a WebID that is already registered", async () => {
            const storageUtility = getStorageUtility({
                insecureStorage: StorageUtility_2.mockStorage({
                    "tmp-resource-server-session-info": JSON.stringify({
                        webId: "https://some.pod/profile#me",
                        sessions: {
                            "https://some-other-resource.provider/": {
                                expiration: 1610026667,
                            },
                        },
                    }),
                }),
            });
            await storageUtility.storeResourceServerSessionInfo("https://some.pod/profile#me", "https://some-resource.provider/", 1610026667);
            await globals_1.expect(storageUtility.get("tmp-resource-server-session-info")).resolves.toEqual(JSON.stringify({
                webId: "https://some.pod/profile#me",
                sessions: {
                    "https://some-other-resource.provider/": {
                        expiration: 1610026667,
                    },
                    "https://some-resource.provider/": {
                        expiration: 1610026667,
                    },
                },
            }));
        });
        globals_1.it("overwrites existing sessions when storing a session for a new WebID", async () => {
            const storageUtility = getStorageUtility({
                insecureStorage: StorageUtility_2.mockStorage({
                    "tmp-resource-server-session-info": JSON.stringify({
                        webId: "https://some-other.pod/profile#me",
                        sessions: {
                            "https://some-other-resource.provider/": {
                                expiration: 1610026667,
                            },
                        },
                    }),
                }),
            });
            await storageUtility.storeResourceServerSessionInfo("https://some.pod/profile#me", "https://some-resource.provider/", 1610026667);
            await globals_1.expect(storageUtility.get("tmp-resource-server-session-info")).resolves.toEqual(JSON.stringify({
                webId: "https://some.pod/profile#me",
                sessions: {
                    "https://some-resource.provider/": {
                        expiration: 1610026667,
                    },
                },
            }));
        });
    });
    globals_1.describe("clearResourceServerSessionInfo", () => {
        globals_1.it("doesn't not fail if the WebID does not exist", async () => {
            const storageUtility = getStorageUtility({
                insecureStorage: StorageUtility_2.mockStorage({}),
            });
            await storageUtility.clearResourceServerSessionInfo("https://some-resource.provider/");
            await globals_1.expect(storageUtility.get("tmp-resource-server-session-info")).resolves.toBeUndefined();
        });
        globals_1.it("clears the session info object if no session is active", async () => {
            const storageUtility = getStorageUtility({
                insecureStorage: StorageUtility_2.mockStorage({
                    "tmp-resource-server-session-info": JSON.stringify({
                        webId: "https://some.pod/profile#me",
                        sessions: {
                            "https://some-resource.provider/": {
                                expiration: 1610026667,
                            },
                        },
                    }),
                }),
            });
            await storageUtility.clearResourceServerSessionInfo("https://some-resource.provider/");
            await globals_1.expect(storageUtility.get("tmp-resource-server-session-info")).resolves.toEqual(JSON.stringify({}));
        });
        globals_1.it("removes the given resource server session info", async () => {
            const storageUtility = getStorageUtility({
                insecureStorage: StorageUtility_2.mockStorage({
                    "tmp-resource-server-session-info": JSON.stringify({
                        webId: "https://some.pod/profile#me",
                        sessions: {
                            "https://some-resource.provider/": {
                                expiration: 1610026667,
                            },
                        },
                    }),
                }),
            });
            await storageUtility.clearResourceServerSessionInfo("https://some-other-resource.provider/");
            await globals_1.expect(storageUtility.get("tmp-resource-server-session-info")).resolves.toEqual(JSON.stringify({
                webId: "https://some.pod/profile#me",
                sessions: {
                    "https://some-resource.provider/": {
                        expiration: 1610026667,
                    },
                },
            }));
        });
    });
});
globals_1.describe("getSessionIdFromOauthState", () => {
    globals_1.it("returns undefined if no stored OIDC 'state' matches the current request's OIDC 'state' value", async () => {
        const mockedStorage = StorageUtility_2.mockStorageUtility({});
        await globals_1.expect(StorageUtility_1.getSessionIdFromOauthState(mockedStorage, "some non-existent 'state' value")).resolves.toBeUndefined();
    });
});
globals_1.describe("loadOidcContextFromStorage", () => {
    globals_1.it("throws if no issuer is stored for the user", async () => {
        const mockedStorage = StorageUtility_2.mockStorageUtility({
            "solidClientAuthenticationUser:mySession": {
                codeVerifier: "some code verifier",
                redirectUrl: "https://my.app/redirect",
                dpop: "true",
            },
        });
        await globals_1.expect(StorageUtility_1.loadOidcContextFromStorage("mySession", mockedStorage, IssuerConfigFetcher_1.mockIssuerConfigFetcher(IssuerConfig_1.mockIssuerConfig()))).rejects.toThrow("Failed to retrieve OIDC context from storage associated with session [mySession]");
    });
    globals_1.it("throws if no token type is stored for the user", async () => {
        const mockedStorage = StorageUtility_2.mockStorageUtility({
            "solidClientAuthenticationUser:mySession": {
                issuer: "https://my.idp/",
                codeVerifier: "some code verifier",
                redirectUrl: "https://my.app/redirect",
            },
        });
        await globals_1.expect(StorageUtility_1.loadOidcContextFromStorage("mySession", mockedStorage, IssuerConfigFetcher_1.mockIssuerConfigFetcher(IssuerConfig_1.mockIssuerConfig()))).rejects.toThrow("Failed to retrieve OIDC context from storage associated with session [mySession]");
    });
    globals_1.it("Returns the value in storage if available", async () => {
        const mockedStorage = StorageUtility_2.mockStorageUtility({
            "solidClientAuthenticationUser:mySession": {
                issuer: "https://my.idp/",
                codeVerifier: "some code verifier",
                redirectUrl: "https://my.app/redirect",
                dpop: "true",
            },
        });
        await globals_1.expect(StorageUtility_1.loadOidcContextFromStorage("mySession", mockedStorage, IssuerConfigFetcher_1.mockIssuerConfigFetcher(IssuerConfig_1.mockIssuerConfig()))).resolves.toEqual({
            issuerConfig: IssuerConfig_1.mockIssuerConfig(),
            codeVerifier: "some code verifier",
            redirectUrl: "https://my.app/redirect",
            dpop: true,
        });
    });
});
globals_1.describe("saveSessionInfoToStorage", () => {
    globals_1.it("saves the refresh token if provided in the given storage", async () => {
        const mockedStorage = StorageUtility_2.mockStorageUtility({});
        await StorageUtility_1.saveSessionInfoToStorage(mockedStorage, "some session", "an ID token", "https://my.webid", "true", "a refresh token", true);
        await globals_1.expect(mockedStorage.getForUser("some session", "refreshToken", { secure: true })).resolves.toEqual("a refresh token");
    });
    globals_1.it("saves ID token if provided in the given storage", async () => {
        const mockedStorage = StorageUtility_2.mockStorageUtility({});
        await StorageUtility_1.saveSessionInfoToStorage(mockedStorage, "some session", "an ID token", undefined, undefined, undefined, true);
        await globals_1.expect(mockedStorage.getForUser("some session", "idToken", { secure: true })).resolves.toEqual("an ID token");
    });
    globals_1.it("saves the webid if provided in the given storage", async () => {
        const mockedStorage = StorageUtility_2.mockStorageUtility({});
        await StorageUtility_1.saveSessionInfoToStorage(mockedStorage, "some session", undefined, "https://my.webid", undefined, undefined, true);
        await globals_1.expect(mockedStorage.getForUser("some session", "webId", { secure: true })).resolves.toEqual("https://my.webid");
    });
    globals_1.it("saves the logged in status if provided in the given storage", async () => {
        const mockedStorage = StorageUtility_2.mockStorageUtility({});
        await StorageUtility_1.saveSessionInfoToStorage(mockedStorage, "some session", undefined, undefined, "true", undefined, true);
        await globals_1.expect(mockedStorage.getForUser("some session", "isLoggedIn", { secure: true })).resolves.toEqual("true");
    });
});
//# sourceMappingURL=StorageUtility.spec.js.map