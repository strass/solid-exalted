"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const jose_legacy_modules_1 = require("@inrupt/jose-legacy-modules");
const dpopUtils_1 = require("./dpopUtils");
let publicKey;
let privateKey;
const mockJwk = async () => {
    if (typeof publicKey === "undefined" || typeof privateKey === "undefined") {
        const generatedPair = await jose_legacy_modules_1.generateKeyPair("ES256");
        publicKey = generatedPair.publicKey;
        privateKey = generatedPair.privateKey;
    }
    return {
        publicKey,
        privateKey,
    };
};
const mockKeyPair = async () => {
    const { privateKey: prvt, publicKey: pblc } = await mockJwk();
    const dpopKeyPair = {
        privateKey: prvt,
        publicKey: await jose_legacy_modules_1.fromKeyLike(pblc),
    };
    dpopKeyPair.publicKey.alg = "ES256";
    return dpopKeyPair;
};
globals_1.describe("createDpopHeader", () => {
    globals_1.it("creates a JWT with 'htm', 'htu' and 'jti' claims in the payload", async () => {
        const header = await dpopUtils_1.createDpopHeader("https://some.resource", "GET", await mockKeyPair());
        const { payload } = await jose_legacy_modules_1.jwtVerify(header, (await mockJwk()).publicKey);
        globals_1.expect(payload.htm).toBe("GET");
        globals_1.expect(payload.jti).not.toBeUndefined();
        globals_1.expect(payload.htu).toBe("https://some.resource/");
    });
    globals_1.it("creates a JWT with the appropriate protected header", async () => {
        const header = await dpopUtils_1.createDpopHeader("https://some.resource", "GET", await mockKeyPair());
        const { protectedHeader } = await jose_legacy_modules_1.jwtVerify(header, (await mockJwk()).publicKey);
        globals_1.expect(protectedHeader.alg).toBe("ES256");
        globals_1.expect(protectedHeader.typ).toBe("dpop+jwt");
        globals_1.expect(protectedHeader.jwk).toEqual((await mockKeyPair()).publicKey);
    });
});
globals_1.describe("generateDpopKeyPair", () => {
    globals_1.it("generates a public, private key pair", async () => {
        const keyPair = await dpopUtils_1.generateDpopKeyPair();
        globals_1.expect(keyPair.publicKey).not.toBeUndefined();
        globals_1.expect(keyPair.privateKey).not.toBeUndefined();
        globals_1.expect(keyPair.publicKey.alg).toBe("ES256");
    });
});
//# sourceMappingURL=dpopUtils.spec.js.map