"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const jose_legacy_modules_1 = require("@inrupt/jose-legacy-modules");
const node_fetch_1 = require("node-fetch");
const IRedirectHandler_1 = require("./IRedirectHandler");
globals_1.jest.mock("cross-fetch");
globals_1.describe("getWebidFromTokenPayload", () => {
    let publicKey;
    let privateKey;
    const mockJwk = async () => {
        if (typeof publicKey === "undefined" || typeof privateKey === "undefined") {
            const generatedPair = await jose_legacy_modules_1.generateKeyPair("ES256");
            publicKey = generatedPair.publicKey;
            privateKey = generatedPair.privateKey;
        }
        return {
            publicKey,
            privateKey,
        };
    };
    const mockJwks = async () => {
        const { publicKey: issuerPubKey } = await mockJwk();
        const jwk = await jose_legacy_modules_1.fromKeyLike(issuerPubKey);
        jwk.alg = "ES256";
        return JSON.stringify({ keys: [jwk] });
    };
    const mockJwt = async (claims, issuer, audience, signingKey) => {
        return new jose_legacy_modules_1.SignJWT(claims)
            .setProtectedHeader({ alg: "ES256" })
            .setIssuedAt()
            .setIssuer(issuer)
            .setAudience(audience)
            .setExpirationTime("2h")
            .sign(signingKey !== null && signingKey !== void 0 ? signingKey : (await mockJwk()).privateKey);
    };
    const mockFetch = (payload, statusCode) => {
        const mockedFetch = globals_1.jest.fn(() => Promise.resolve(new node_fetch_1.Response(payload, { status: statusCode })));
        const crossFetch = globals_1.jest.requireMock("cross-fetch");
        crossFetch.fetch = mockedFetch;
        return mockedFetch;
    };
    globals_1.it("throws if the JWKS cannot be fetched", async () => {
        mockFetch("", 404);
        const jwt = await mockJwt({ someClaim: true }, "https://some.issuer", "https://some.clientId");
        await globals_1.expect(IRedirectHandler_1.getWebidFromTokenPayload(jwt, "https://some.jwks", "https://some.issuer", "https://some.clientId")).rejects.toThrow("Could not fetch JWKS for [https://some.issuer] at [https://some.jwks]: 404 Not Found");
    });
    globals_1.it("throws if the JWKS is malformed", async () => {
        mockFetch("", 200);
        const jwt = await mockJwt({ someClaim: true }, "https://some.issuer", "https://some.clientId");
        await globals_1.expect(IRedirectHandler_1.getWebidFromTokenPayload(jwt, "https://some.jwks", "https://some.issuer", "https://some.clientId")).rejects.toThrow("Malformed JWKS for [https://some.issuer] at [https://some.jwks]:");
    });
    globals_1.it("throws if the ID token signature verification fails", async () => {
        mockFetch(await mockJwks(), 200);
        const { privateKey: anotherKey } = await jose_legacy_modules_1.generateKeyPair("ES256");
        const jwt = await mockJwt({ someClaim: true }, "https://some.issuer", "https://some.clientId", anotherKey);
        await globals_1.expect(IRedirectHandler_1.getWebidFromTokenPayload(jwt, "https://some.jwks", "https://some.issuer", "https://some.clientId")).rejects.toThrow("ID token verification failed: JWSSignatureVerificationFailed: signature verification failed");
    });
    globals_1.it("throws if the ID token issuer verification fails", async () => {
        mockFetch(await mockJwks(), 200);
        const jwt = await mockJwt({ someClaim: true }, "https://some.other.issuer", "https://some.clientId");
        await globals_1.expect(IRedirectHandler_1.getWebidFromTokenPayload(jwt, "https://some.jwks", "https://some.issuer", "https://some.clientId")).rejects.toThrow('ID token verification failed: JWTClaimValidationFailed: unexpected "iss" claim value');
    });
    globals_1.it("throws if the ID token audience verification fails", async () => {
        mockFetch(await mockJwks(), 200);
        const jwt = await mockJwt({ someClaim: true }, "https://some.issuer", "https://some.other.clientId");
        await globals_1.expect(IRedirectHandler_1.getWebidFromTokenPayload(jwt, "https://some.jwks", "https://some.issuer", "https://some.clientId")).rejects.toThrow('ID token verification failed: JWTClaimValidationFailed: unexpected "aud" claim value');
    });
    globals_1.it("throws if the 'webid' and the 'sub' claims are missing", async () => {
        mockFetch(await mockJwks(), 200);
        const jwt = await mockJwt({ someClaim: true }, "https://some.issuer", "https://some.clientId");
        await globals_1.expect(IRedirectHandler_1.getWebidFromTokenPayload(jwt, "https://some.jwks", "https://some.issuer", "https://some.clientId")).rejects.toThrow("it has no 'webid' claim and no 'sub' claim.");
    });
    globals_1.it("throws if the 'webid' claims is missing and the 'sub' claim is not an IRI", async () => {
        mockFetch(await mockJwks(), 200);
        const jwt = await mockJwt({ sub: "some user ID" }, "https://some.issuer", "https://some.clientId");
        await globals_1.expect(IRedirectHandler_1.getWebidFromTokenPayload(jwt, "https://some.jwks", "https://some.issuer", "https://some.clientId")).rejects.toThrow("The ID token has no 'webid' claim, and its 'sub' claim of [some user ID] is invalid as a URL - error [TypeError: Invalid URL: some user ID].");
    });
    globals_1.it("returns the WebID it the 'webid' claim exists", async () => {
        mockFetch(await mockJwks(), 200);
        const jwt = await mockJwt({ webid: "https://some.webid#me" }, "https://some.issuer", "https://some.clientId");
        await globals_1.expect(IRedirectHandler_1.getWebidFromTokenPayload(jwt, "https://some.jwks", "https://some.issuer", "https://some.clientId")).resolves.toBe("https://some.webid#me");
    });
    globals_1.it("returns the WebID it the 'sub' claim exists and it is IRI-like", async () => {
        mockFetch(await mockJwks(), 200);
        const jwt = await mockJwt({ sub: "https://some.webid#me" }, "https://some.issuer", "https://some.clientId");
        await globals_1.expect(IRedirectHandler_1.getWebidFromTokenPayload(jwt, "https://some.jwks", "https://some.issuer", "https://some.clientId")).resolves.toBe("https://some.webid#me");
    });
});
//# sourceMappingURL=IRedirectHandler.spec.js.map