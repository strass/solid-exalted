import { addIri, addBoolean, addDatetime, addDecimal, addInteger, addStringNoLocale, addStringWithLocale, addNamedNode, addLiteral, addTerm, addUrl } from './add.mjs';
import { removeAll, removeIri, removeBoolean, removeDatetime, removeDecimal, removeInteger, removeStringNoLocale, removeStringWithLocale, removeNamedNode, removeLiteral, removeUrl } from './remove.mjs';
import { setIri, setBoolean, setDatetime, setDecimal, setInteger, setStringNoLocale, setStringWithLocale, setNamedNode, setLiteral, setTerm, setUrl } from './set.mjs';
import { createThing, isThing } from './thing.mjs';

/**
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
/**
 * Create or modify a [[Thing]], setting multiple properties in a single expresssion.
 *
 * For example, you can create a new Thing and initialise several properties as follows:
 *
 *     const me = buildThing()
 *       .addUrl(rdf.type, schema.Person)
 *       .addStringNoLocale(schema.givenName, "Vincent")
 *       .build();
 *
 * Take note of the final call to `.build()` to obtain the actual Thing.
 *
 * @param init Optionally pass an existing [[Thing]] to modify the properties of. If left empty, `buildThing` will initialise a new Thing.
 * @returns a [[ThingBuilder]], a Fluent API that allows you to set multiple properties in a single expression.
 * @since 1.9.0
 */
function buildThing(init = createThing()) {
    const thing = isThing(init) ? init : createThing(init);
    return {
        build: () => thing,
        addUrl: getAdder(thing, addUrl),
        addIri: getAdder(thing, addIri),
        addBoolean: getAdder(thing, addBoolean),
        addDatetime: getAdder(thing, addDatetime),
        addDecimal: getAdder(thing, addDecimal),
        addInteger: getAdder(thing, addInteger),
        addStringNoLocale: getAdder(thing, addStringNoLocale),
        addStringWithLocale: (property, value, locale) => buildThing(addStringWithLocale(thing, property, value, locale)),
        addNamedNode: getAdder(thing, addNamedNode),
        addLiteral: getAdder(thing, addLiteral),
        addTerm: getAdder(thing, addTerm),
        setUrl: getSetter(thing, setUrl),
        setIri: getSetter(thing, setIri),
        setBoolean: getSetter(thing, setBoolean),
        setDatetime: getSetter(thing, setDatetime),
        setDecimal: getSetter(thing, setDecimal),
        setInteger: getSetter(thing, setInteger),
        setStringNoLocale: getSetter(thing, setStringNoLocale),
        setStringWithLocale: (property, value, locale) => buildThing(setStringWithLocale(thing, property, value, locale)),
        setNamedNode: getSetter(thing, setNamedNode),
        setLiteral: getSetter(thing, setLiteral),
        setTerm: getSetter(thing, setTerm),
        removeAll: (property) => buildThing(removeAll(thing, property)),
        removeUrl: getRemover(thing, removeUrl),
        removeIri: getRemover(thing, removeIri),
        removeBoolean: getRemover(thing, removeBoolean),
        removeDatetime: getRemover(thing, removeDatetime),
        removeDecimal: getRemover(thing, removeDecimal),
        removeInteger: getRemover(thing, removeInteger),
        removeStringNoLocale: getRemover(thing, removeStringNoLocale),
        removeStringWithLocale: (property, value, locale) => buildThing(removeStringWithLocale(thing, property, value, locale)),
        removeNamedNode: getRemover(thing, removeNamedNode),
        removeLiteral: getRemover(thing, removeLiteral),
    };
}
function getAdder(thing, adder) {
    return (property, value) => {
        return buildThing(adder(thing, property, value));
    };
}
function getSetter(thing, setter) {
    return (property, value) => {
        return buildThing(setter(thing, property, value));
    };
}
function getRemover(thing, remover) {
    return (property, value) => {
        return buildThing(remover(thing, property, value));
    };
}

export { buildThing };
